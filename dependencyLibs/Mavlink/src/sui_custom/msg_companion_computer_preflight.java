/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE COMPANION_COMPUTER_PREFLIGHT PACKING
package com.MAVLink.sui_custom;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
 * Tell the companion computer to perform preflight operations, set the camera, and time
 */
public class msg_companion_computer_preflight extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_COMPANION_COMPUTER_PREFLIGHT = 14;
    public static final int MAVLINK_MSG_LENGTH = 43;
    private static final long serialVersionUID = MAVLINK_MSG_ID_COMPANION_COMPUTER_PREFLIGHT;


      
    /**
     * current time in milliseconds from EPOCH, in UTC
     */
    public long time;
      
    /**
     * Mission ID
     */
    public byte mission_id[] = new byte[32];
      
    /**
     * camType, a value in the CamType enum in sui-camera
     */
    public short type;
      
    /**
     * System ID
     */
    public short target_system;
      
    /**
     * Component ID
     */
    public short target_component;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_COMPANION_COMPUTER_PREFLIGHT;
        
        packet.payload.putUnsignedLong(time);
        
        
        for (int i = 0; i < mission_id.length; i++) {
            packet.payload.putByte(mission_id[i]);
        }
                    
        
        packet.payload.putUnsignedByte(type);
        
        packet.payload.putUnsignedByte(target_system);
        
        packet.payload.putUnsignedByte(target_component);
        
        if(isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a companion_computer_preflight message into this class fields
     *
     * @param payload The message to decode
     */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.time = payload.getUnsignedLong();
        
         
        for (int i = 0; i < this.mission_id.length; i++) {
            if(!payload.hasRemaining()) break;
            this.mission_id[i] = payload.getByte();
        }
                
        
        this.type = payload.getUnsignedByte();
        
        this.target_system = payload.getUnsignedByte();
        
        this.target_component = payload.getUnsignedByte();
        
        if(isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_companion_computer_preflight() {
        msgid = MAVLINK_MSG_ID_COMPANION_COMPUTER_PREFLIGHT;
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_companion_computer_preflight(MAVLinkPacket mavLinkPacket) {
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_COMPANION_COMPUTER_PREFLIGHT;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);        
    }

       
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setMission_Id(String str) {
        int len = Math.min(str.length(), 32);
        for (int i=0; i<len; i++) {
            mission_id[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<32; i++) {            // padding for the rest of the buffer
            mission_id[i] = 0;
        }
    }

    /**
    * Gets the message, formated as a string
    */
    public String getMission_Id() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 32; i++) {
            if (mission_id[i] != 0)
                buf.append((char) mission_id[i]);
            else
                break;
        }
        return buf.toString();

    }
                               
    /**
     * Returns a string with the MSG name and data
     */
    public String toString() {
        return "MAVLINK_MSG_ID_COMPANION_COMPUTER_PREFLIGHT - sysid:"+sysid+" compid:"+compid+" time:"+time+" mission_id:"+mission_id+" type:"+type+" target_system:"+target_system+" target_component:"+target_component+"";
    }
}
        