/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE SET_COMPANION_COMPUTER_WIFI PACKING
package com.MAVLink.sui_custom;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* Setup the companion computers wifi as an access point or a client.  If the ssid or pass fields are empty strings, the previous values will be used.
*/
public class msg_set_companion_computer_wifi extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_SET_COMPANION_COMPUTER_WIFI = 8;
    public static final int MAVLINK_MSG_LENGTH = 67;
    private static final long serialVersionUID = MAVLINK_MSG_ID_SET_COMPANION_COMPUTER_WIFI;


      
    /**
    * cmd, 1-access point mode, 2-client mode
    */
    public short cmd;
      
    /**
    * ssid
    */
    public byte ssid[] = new byte[32];
      
    /**
    * pass
    */
    public byte pass[] = new byte[32];
      
    /**
    * System ID
    */
    public short target_system;
      
    /**
    * Component ID
    */
    public short target_component;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_SET_COMPANION_COMPUTER_WIFI;
              
        packet.payload.putUnsignedByte(cmd);
              
        
        for (int i = 0; i < ssid.length; i++) {
            packet.payload.putByte(ssid[i]);
        }
                    
              
        
        for (int i = 0; i < pass.length; i++) {
            packet.payload.putByte(pass[i]);
        }
                    
              
        packet.payload.putUnsignedByte(target_system);
              
        packet.payload.putUnsignedByte(target_component);
        
        return packet;
    }

    /**
    * Decode a set_companion_computer_wifi message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.cmd = payload.getUnsignedByte();
              
         
        for (int i = 0; i < this.ssid.length; i++) {
            this.ssid[i] = payload.getByte();
        }
                
              
         
        for (int i = 0; i < this.pass.length; i++) {
            this.pass[i] = payload.getByte();
        }
                
              
        this.target_system = payload.getUnsignedByte();
              
        this.target_component = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_set_companion_computer_wifi(){
        msgid = MAVLINK_MSG_ID_SET_COMPANION_COMPUTER_WIFI;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_set_companion_computer_wifi(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_SET_COMPANION_COMPUTER_WIFI;
        unpack(mavLinkPacket.payload);        
    }

       
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setSsid(String str) {
        int len = Math.min(str.length(), 32);
        for (int i=0; i<len; i++) {
            ssid[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<32; i++) {            // padding for the rest of the buffer
            ssid[i] = 0;
        }
    }

    /**
    * Gets the message, formated as a string
    */
    public String getSsid() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 32; i++) {
            if (ssid[i] != 0)
                buf.append((char) ssid[i]);
            else
                break;
        }
        return buf.toString();

    }
                          
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setPass(String str) {
        int len = Math.min(str.length(), 32);
        for (int i=0; i<len; i++) {
            pass[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<32; i++) {            // padding for the rest of the buffer
            pass[i] = 0;
        }
    }

    /**
    * Gets the message, formated as a string
    */
    public String getPass() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 32; i++) {
            if (pass[i] != 0)
                buf.append((char) pass[i]);
            else
                break;
        }
        return buf.toString();

    }
                             
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_SET_COMPANION_COMPUTER_WIFI - sysid:"+sysid+" compid:"+compid+" cmd:"+cmd+" ssid:"+ssid+" pass:"+pass+" target_system:"+target_system+" target_component:"+target_component+"";
    }
}
        